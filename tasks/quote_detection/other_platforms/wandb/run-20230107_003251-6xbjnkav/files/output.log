
normalizer.cc(50) LOG(INFO) precompiled_charsmap is empty. use identity normalization.
    6 training samples
    6 validation samples
Some weights of the model checkpoint at google/bigbird-roberta-base were not used when initializing BigBirdModel: ['cls.predictions.decoder.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.bias', 'cls.predictions.transform.LayerNorm.bias', 'cls.seq_relationship.weight', 'cls.predictions.decoder.weight']
- This IS expected if you are initializing BigBirdModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BigBirdModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
***** Running training *****
  Num examples = 6
  Num Epochs = 3
  Instantaneous batch size per device = 1
  Total train batch size (w. parallel, distributed & accumulation) = 1
  Gradient Accumulation steps = 1
  Total optimization steps = 18
Automatic Weights & Biases logging enabled, to disable set os.environ["WANDB_DISABLED"] = "true"
  0% 0/18 [00:00<?, ?it/s]Attention type 'block_sparse' is not possible if sequence_length: 68 <= num global tokens: 2 * config.block_size + min. num sliding tokens: 3 * config.block_size + config.num_random_blocks * config.block_size + additional buffer: config.num_random_blocks * config.block_size = 704 with config.block_size = 64, config.num_random_blocks = 3. Changing attention type to 'original_full'...












 89% 16/18 [00:26<00:03,  1.60s/it]
100% 18/18 [00:29<00:00,  1.51s/it]
Training completed. Do not forget to share your model on huggingface.co/models =)
100% 18/18 [00:29<00:00,  1.65s/it]
Saving model checkpoint to .
Trainer.model is not a `PreTrainedModel`, only saving its state dict.
***** Running Evaluation *****
  Num examples = 6
  Batch size = 1
***** train metrics *****
  epoch                    =        3.0
  train_loss               =     0.5237
  train_runtime            = 0:00:29.83
  train_samples            =          6
  train_samples_per_second =      0.603
  train_steps_per_second   =      0.603
*** Evaluate ***
Python 3.7.6 (default, Jan  8 2020, 13:42:34)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.22.0 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.22.0
Out[1]: tensor([[1., 1., 1., 0.]], dtype=torch.float64)
Out[2]:
tensor([[-2.0011],
        [-0.9960],
        [-0.4610],
        [-0.8051]])
Out[3]: torch.Size([1, 4])
Out[4]: torch.Size([4, 1])
Out[5]: tensor([[1., 1., 1., 0.]], dtype=torch.float64)
  0% 0/6 [00:00<?, ?it/s]
Out[6]: tensor([[1., 1., 1., 0.]], dtype=torch.float64)


 50% 3/6 [01:11<01:13, 24.41s/it]
Out[10]:
tensor([[1., 1., 1., 0.],
        [0., 0., 0., 0.],
