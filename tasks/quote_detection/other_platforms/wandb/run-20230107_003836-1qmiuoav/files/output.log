
normalizer.cc(50) LOG(INFO) precompiled_charsmap is empty. use identity normalization.
Some weights of the model checkpoint at google/bigbird-roberta-base were not used when initializing BigBirdModel: ['cls.predictions.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.decoder.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.decoder.bias', 'cls.predictions.transform.LayerNorm.weight']
- This IS expected if you are initializing BigBirdModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BigBirdModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
***** Running training *****
  Num examples = 6
  Num Epochs = 3
  Instantaneous batch size per device = 1
  Total train batch size (w. parallel, distributed & accumulation) = 1
  Gradient Accumulation steps = 1
  Total optimization steps = 18
Automatic Weights & Biases logging enabled, to disable set os.environ["WANDB_DISABLED"] = "true"
  0% 0/18 [00:00<?, ?it/s]Attention type 'block_sparse' is not possible if sequence_length: 162 <= num global tokens: 2 * config.block_size + min. num sliding tokens: 3 * config.block_size + config.num_random_blocks * config.block_size + additional buffer: config.num_random_blocks * config.block_size = 704 with config.block_size = 64, config.num_random_blocks = 3. Changing attention type to 'original_full'...
    6 training samples
    6 validation samples
















100% 18/18 [00:38<00:00,  1.87s/it]
Training completed. Do not forget to share your model on huggingface.co/models =)
100% 18/18 [00:38<00:00,  2.15s/it]
Saving model checkpoint to .
Trainer.model is not a `PreTrainedModel`, only saving its state dict.
{'train_runtime': 38.8047, 'train_samples_per_second': 0.464, 'train_steps_per_second': 0.464, 'train_loss': 0.5353387726677789, 'epoch': 3.0}
***** Running Evaluation *****
  Num examples = 6
  Batch size = 1
***** train metrics *****
  epoch                    =        3.0
  train_loss               =     0.5353
  train_runtime            = 0:00:38.80
  train_samples            =          6
  train_samples_per_second =      0.464
  train_steps_per_second   =      0.464
*** Evaluate ***
  0% 0/6 [00:00<?, ?it/s]
Python 3.7.6 (default, Jan  8 2020, 13:42:34)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.22.0 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.22.0

 33% 2/6 [00:08<00:16,  4.25s/it]
Out[2]:
tensor([[   1.,    1.,    1.,    0.,    1., -100.],
        [   0.,    0.,    0.,    0.,    0.,    0.]], dtype=torch.float64)
Out[3]:
tensor([[-1.6684],
        [-1.0598],
        [-0.8916],
        [-0.9625],
        [-1.9392],
        [-2.0744],
        [-1.5531],
        [-1.1018],
        [-1.8641],
        [-2.1988],
        [-1.3455]])
Out[4]:
tensor([[-1.5456],
        [-0.8270],
        [-1.5790]])
Out[5]: tensor([[0., 0., 0.]], dtype=torch.float64)
Out[6]:
tensor([[0.],
        [0.],
        [0.]], dtype=torch.float64)
